using System.Collections.Generic;

namespace JPEG_Cs
{
    public struct МатрицаБайтов
    {
        public byte[,] Элементы { get; private set; }
        public МатрицаБайтов(byte[,] элементы)
        {
            Элементы = элементы;
        }
        public int Ширина
        {
            get
            {
                return Элементы.GetLength(0);
            }
        }
        public int Высота
        {
            get
            {
                return Элементы.GetLength(1);
            }
        }
        public int ПолучитьКоличествоБлоковПоШирине(int ширинаБлока)
        {
            if (Ширина % ширинаБлока != 0)
                return Ширина / ширинаБлока + 1;
            else
                return Ширина / ширинаБлока;
        }

        public int ПолучитьКоличествоБлоковПоВысоте(int высотаБлока)
        {
            if (Высота % высотаБлока != 0)
                return Высота / высотаБлока + 1;
            else
                return Высота / высотаБлока;
        }
    }
    public struct Блок
    {
        public byte[,] Элементы { get; private set; }
        public Блок(byte[,] элементы)
        {
            Элементы = элементы;
        }
    }
    class РазбивательМатрицыНаБлоки
    {
        private int ширинаБлока;
        private int высотаБлока;
        private МатрицаБайтов матрица;
        int количествоБлоковПоШирине;
        int количествоБлоковПоВысоте;
        public РазбивательМатрицыНаБлоки(МатрицаБайтов матрица, int ширинаБлока, int высотаБлока)
        {
            this.матрица = матрица;
            this.ширинаБлока = ширинаБлока;
            this.высотаБлока = высотаБлока;
        }

        public Блок[,] ПолучитьБлокиВФормеМатрицы()
        {
            List<Блок> списокБлоков = ПолучитьБлокиВФормеСписка();
            Блок[,] матрицаБлоков = new Блок[количествоБлоковПоШирине, количествоБлоковПоВысоте];
            for (int номерБлокаПоВысоте = 0; номерБлокаПоВысоте < количествоБлоковПоВысоте; номерБлокаПоВысоте++)
                for (int номерБлокаПоШирине = 0; номерБлокаПоШирине < количествоБлоковПоШирине; номерБлокаПоШирине++)
                    матрицаБлоков[номерБлокаПоШирине, номерБлокаПоВысоте] = списокБлоков[количествоБлоковПоШирине * номерБлокаПоВысоте + номерБлокаПоШирине];

            return матрицаБлоков;
        }

        public List<Блок> ПолучитьБлокиВФормеСписка()
        {
            количествоБлоковПоШирине = матрица.ПолучитьКоличествоБлоковПоШирине(ширинаБлока);
            количествоБлоковПоВысоте = матрица.ПолучитьКоличествоБлоковПоВысоте(высотаБлока);

            int ширинаДополненнойМатрицы = матрица.Ширина,
                высотаДополненнойМатрицы = матрица.Высота;
            bool нужноДополнитьМатрицуНулями = false;
            if (матрица.Ширина % ширинаБлока != 0)
            {
                ширинаДополненнойМатрицы = ширинаБлока * количествоБлоковПоШирине;
                нужноДополнитьМатрицуНулями = true;
            }
            if (матрица.Высота % высотаБлока != 0)
            {
                высотаДополненнойМатрицы = высотаБлока * количествоБлоковПоВысоте;
                нужноДополнитьМатрицуНулями = true;
            }

            МатрицаБайтов матрицаДляДеления;
            if (нужноДополнитьМатрицуНулями)
                матрицаДляДеления = ДополнитьМатрицуНулями(ширинаДополненнойМатрицы, высотаДополненнойМатрицы);
            else
                матрицаДляДеления = матрица;

            List<Блок> списокБлоков = РазделитьМатрицуНаБлоки(матрицаДляДеления);
            
            return списокБлоков;
        }

        private List<Блок> РазделитьМатрицуНаБлоки(МатрицаБайтов матрица)
        {
            List<Блок> блоки = new List<Блок>();
            for (int номерБлокаПоВысоте = 0; номерБлокаПоВысоте < количествоБлоковПоВысоте; номерБлокаПоВысоте++)
                for (int номерБлокаПоШирине = 0; номерБлокаПоШирине < количествоБлоковПоШирине; номерБлокаПоШирине++)
                {
                    Блок новыйБлок = ПолучитьБлокИзМатрицы(матрица, номерБлокаПоШирине, номерБлокаПоВысоте);
                    блоки.Add(новыйБлок);
                }

            return блоки;
        }

        private Блок ПолучитьБлокИзМатрицы(МатрицаБайтов матрица, int номерБлокаВШирину, int номерБлокаВВысоту)
        {
            Блок новыйБлок = new Блок(new byte[ширинаБлока, высотаБлока]);
            int номерЭлементаБлокаПоВысоте = 0;
            while (номерЭлементаБлокаПоВысоте < высотаБлока)
            {
                int номерЭлементаБлокаПоШирине = 0;
                while (номерЭлементаБлокаПоШирине < ширинаБлока)
                {
                    новыйБлок.Элементы[номерЭлементаБлокаПоШирине, номерЭлементаБлокаПоВысоте] = матрица.Элементы[номерБлокаВШирину * ширинаБлока + номерЭлементаБлокаПоШирине, номерБлокаВВысоту * высотаБлока + номерЭлементаБлокаПоВысоте];
                    номерЭлементаБлокаПоШирине++;
                }
                номерЭлементаБлокаПоВысоте++;
            }
            return новыйБлок;
        }

        private МатрицаБайтов ДополнитьМатрицуНулями(int ширинаНовойМатрицы, int высотаНовойМатрицы)
        {
            МатрицаБайтов новаяМатрица = new МатрицаБайтов (new byte[ширинаНовойМатрицы, высотаНовойМатрицы]);
            for (int j = 0; j < матрица.Высота; j++)
                for (int i = 0; i < матрица.Ширина; i++)
                    новаяМатрица.Элементы[i, j] = матрица.Элементы[i, j];

            return новаяМатрица;
        }
    }
}
