using System;
using System.Collections.Generic;
using System.Text;

namespace JPEG_Cs
{
    class Преобразователь
    {
        public static МатрицаБайтов ОбъединитьСписокБлоковВМатрицуБайтов(List<Блок> блоки, int ширинаМатрицы, int высотаМатрицы)
        {
            int ширинаБлока = блоки[0].Элементы.GetLength(0);
            int высотаБлока = блоки[0].Элементы.GetLength(1);
            МатрицаБайтов матрицаБайтов = new МатрицаБайтов(new byte[ширинаМатрицы, высотаМатрицы]);
            int количествоБлоковПоШирине = матрицаБайтов.ПолучитьКоличествоБлоковПоШирине(ширинаБлока);
            int количествоБлоковПоВысоте = матрицаБайтов.ПолучитьКоличествоБлоковПоВысоте(высотаБлока);

            byte[,] временнаяМатрица = new byte[количествоБлоковПоШирине * ширинаБлока, количествоБлоковПоВысоте * высотаБлока];
            for (int номерБлокаВВысоту = 0; номерБлокаВВысоту < количествоБлоковПоВысоте; номерБлокаВВысоту++)
                for (int номерБлокаВШирину = 0; номерБлокаВШирину < количествоБлоковПоШирине; номерБлокаВШирину++)
                {
                    byte[,] элементыБлока = блоки[номерБлокаВВысоту * количествоБлоковПоШирине + номерБлокаВШирину].Элементы;
                    for (int номерЭлементаВВысоту = 0; номерЭлементаВВысоту < высотаБлока; номерЭлементаВВысоту++)
                        for (int номерЭлементаВШирину = 0; номерЭлементаВШирину < ширинаБлока; номерЭлементаВШирину++)
                            временнаяМатрица[номерЭлементаВШирину + ширинаБлока * номерБлокаВШирину, номерЭлементаВВысоту + высотаБлока * номерБлокаВВысоту] =
                                элементыБлока[номерЭлементаВШирину, номерЭлементаВВысоту];

                }

            for (int j = 0; j < высотаМатрицы; j++)
                for (int i = 0; i < ширинаМатрицы; i++)
                    матрицаБайтов.Элементы[i, j] = временнаяМатрица[i, j];

            return матрицаБайтов;
        }

        public static List<Блок> ТрансформироватьМатрицуБлоковВСписокБлоков(Блок[,] матрицаБлоков)
        {
            int ширинаМатрицыБлоков = матрицаБлоков.GetLength(0);
            int высотаМатрицыБлоков = матрицаБлоков.GetLength(1);
            List<Блок> списокБлоков = new List<Блок>();
            for (int j = 0; j < высотаМатрицыБлоков; j++)
                for (int i = 0; i < ширинаМатрицыБлоков; i++)
                    списокБлоков.Add(матрицаБлоков[i, j]);

            return списокБлоков;
        }

        public static Блок[,] ТрансформироватьСписокБлоковВМатрицуБлоков(List<Блок> списокБлоков, int ширинаМатрицыБлоков, int высотаМатрицыБлоков)
        {
            Блок[,] матрицаБлоков = new Блок[ширинаМатрицыБлоков, высотаМатрицыБлоков];
            while (ширинаМатрицыБлоков * высотаМатрицыБлоков > списокБлоков.Count)
            {
                списокБлоков.Add(new Блок());
            }

            for (int j = 0; j < высотаМатрицыБлоков; j++)
                for (int i = 0; i < ширинаМатрицыБлоков; i++)
                    матрицаБлоков[i, j] = списокБлоков[j * ширинаМатрицыБлоков + i];

            return матрицаБлоков;
        }
    }
}
